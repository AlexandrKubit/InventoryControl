@typeparam TValue

<div class="custom-select" @ref="containerRef">
    <div class="selected-items" @onclick="ToggleDropdown">
        @if (SelectedValues.Any())
        {
            @foreach (var item in SelectedItems)
            {
                <span class="selected-tag">@item.Text</span>
            }
        }
        else
        {
            <span>Выберите</span>
        }
    </div>

    @if (isOpen)
    {
        <div class="dropdown-options">
            @foreach (var option in Options)
            {
                <div class="option @(IsSelected(option.Value) ? "selected" : "")" 
                     @onclick="@(() => HandleSelect(option.Value))">
                    @option.Text
                </div>
            }
        </div>
    }

    <select multiple @onchange="HandleNativeChange" style="display: none;">
        @foreach (var option in Options)
        {
            <option value="@option.Value" selected="@IsSelected(option.Value)">@option.Text</option>
        }
    </select>
</div>

@code {
    private bool isOpen = false;
    private ElementReference containerRef;

    [Parameter]
    public IEnumerable<SelectOption> Options { get; set; } = new List<SelectOption>();

    [Parameter]
    public IEnumerable<TValue> SelectedValues { get; set; } = new List<TValue>();

    [Parameter]
    public EventCallback<IEnumerable<TValue>> SelectedValuesChanged { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }

    private IEnumerable<SelectOption> SelectedItems => 
        Options.Where(o => SelectedValues.Contains(o.Value));

    private bool IsSelected(TValue value) => SelectedValues.Contains(value);

    private async Task HandleSelect(TValue value)
    {
        var newValues = SelectedValues.ToList();
        
        if (newValues.Contains(value))
            newValues.Remove(value);
        else
            newValues.Add(value);

        await UpdateSelection(newValues);
    }

    private async Task HandleNativeChange(ChangeEventArgs e)
    {
        var values = (e.Value as IEnumerable<object>)?.Select(x => (TValue)Convert.ChangeType(x, typeof(TValue)));
        await UpdateSelection(values);
    }

    private async Task UpdateSelection(IEnumerable<TValue> values)
    {
        SelectedValues = values;
        await SelectedValuesChanged.InvokeAsync(SelectedValues);
        
        var args = new ChangeEventArgs {
            Value = SelectedValues.Select(v => v.ToString()).ToArray()
        };
        
        await OnChange.InvokeAsync(args);
    }

    private void ToggleDropdown()
    {
        isOpen = !isOpen;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    public class SelectOption
    {
        public string Text { get; set; }
        public TValue Value { get; set; }
    }
}


<style>
    .custom-select {
        position: relative;
/*         width: 300px; */
        font-family: Arial;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 14px; /* Уменьшен размер шрифта */
    }

    .selected-items {
        min-height: 36px; /* Уменьшена минимальная высота */
        display: flex;
        flex-wrap: wrap;
        gap: 4px;
        cursor: pointer;
        padding: 4px 28px 4px 8px; /* Уменьшены отступы */
        position: relative;
    }

    .selected-tag {
        background: #e0e0e0;
        padding: 2px 6px; /* Уменьшен padding */
        border-radius: 3px;
        font-size: 0.85em; /* Уменьшен размер шрифта */
        line-height: 1.4; /* Выравнивание по вертикали */
        margin: 1px 0;
    }

    .placeholder {
        color: #999;
        align-self: center;
        padding: 4px 0;
    }

    .dropdown-options {
        position: absolute;
        top: calc(100% + 4px); /* Поднят ближе к инпуту */
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #ccc;
        border-radius: 4px;
        max-height: 200px;
        overflow-y: auto;
        z-index: 1000;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .option {
        padding: 6px 12px; /* Уменьшен padding */
        cursor: pointer;
        line-height: 1.4;
    }

    .option:hover {
        background-color: #f5f5f5;
    }

    .option.selected {
        background-color: #e8f0fe;
        font-weight: bold;
    }

    /* Добавим стрелку как у нативного select */
    .selected-items:after {
        content: "▼";
        position: absolute;
        right: 8px;
        top: 50%;
        transform: translateY(-50%);
        font-size: 0.7em;
        color: #666;
        pointer-events: none;
    }

    .custom-select.open .selected-items:after {
        transform: translateY(-50%) rotate(180deg);
    }
</style>